#!/usr/bin/env ruby

# Copyright (c) 2017 Minqi Pan <pmq2001@gmail.com>
# 
# This file is part of Node.js Compiler, distributed under the MIT License
# For full terms see the included LICENSE file

$LOAD_PATH.unshift File.expand_path("../../lib", __FILE__)

require "compiler"
require 'optparse'

STDERR.puts %Q{
Node.js Compiler (nodec) v#{::Compiler::VERSION} (runtime #{::Compiler.node_version})
}.strip
STDERR.puts

# took directly from https://github.com/nodejs/node/blob/master/configure#L47,L50
VALID_OS = ['win', 'mac', 'solaris', 'freebsd', 'openbsd', 'linux', 'android', 'aix']
VALID_CPU = [
  'arm', 'arm64', 'ia32', 'mips', 'mipsel', 'ppc', 'ppc64', 'x32', 'x64', 'x86',
  's390', 's390x'
]

USAGE = %Q{

Compiling your Node.js application into a single executable.

Usage

  nodec [OPTION]... ENTRANCE

}.strip

EXAMPLES = %Q{

Examples

Compile a CLI tool:

  git clone --depth 1 https://github.com/jashkenas/coffeescript.git
  cd coffeescript
  nodec bin/coffee
  ./a.out (or a.exe on Windows)

Compile a web application:

  git clone --depth 1 https://github.com/eggjs/examples.git
  cd examples/helloworld
  npm install
  nodec node_modules/.bin/egg-bin
  ./a.out dev (or a.exe dev on Windows)

}.strip

options = {}

outer_opts = nil

usage = lambda do |out|
  out.puts outer_opts
end

OptionParser.new do |opts|
  opts.banner = USAGE

  opts.on("-rDIR", "--root=DIR", "Specifies the path to the root of the application") do |dir|
    options[:root] = dir
  end

  opts.on("-oFILE", "--output=FILE", "Specifies the path of the output file") do |file|
    options[:output] = file
  end

  opts.on("-dDIR", "--tmpdir=DIR", "Specifies the directory for temporary files") do |dir|
    options[:tmpdir] = dir
  end

  opts.on("--clean-tmpdir", "Cleans all temporary files that were generated last time") do
    options[:clean_tmpdir] = true
  end

  opts.on("--keep-tmpdir", "Keeps all temporary files that were generated last time") do
    options[:keep_tmpdir] = true
  end

  opts.on("--make-args=ARGS", "Passes extra arguments to make") do |args|
    options[:make_args] = args
  end

  opts.on("--vcbuild-args=ARGS", "Passes extra arguments to vcbuild.bat") do |args|
    options[:vcbuild_args] = args
  end

  opts.on('-nFILE', "--npm=FILE", "Specifies the path of npm") do |file|
    options[:npm] = file
  end

  opts.on("--npm-package=NAME", "Downloads and compiles the specified npm package") do |name|
    options[:npm_package] = name
  end

  opts.on("--npm-package-version=VER", "Downloads and compiles the specified version of the npm package") do |ver|
    options[:npm_package_version] = ver
  end

  opts.on("--auto-update-url=URL", "Enables auto-update and specifies the URL to get the latest version") do |url|
    options[:auto_update_url] = url
  end

  opts.on("--auto-update-base=STRING", "Enables auto-update and specifies the base version string") do |string|
    options[:auto_update_base] = string
  end

  opts.on("--debug", "Enable debug mode") do
    options[:debug] = true
  end

  opts.on('-osOS', "--dest-os=OS", "Destination operating system (enum: #{VALID_OS.join(' ')})") do |os|
    unless VALID_OS.include? os
      puts "Invalid destination (got: --dest-os=#{os}), pick one of: #{VALID_OS.join(' ')}"
      exit 1
    end

    options[:os] = os
  end

  opts.on('-archARCH', "--dest-arch=ARCH", "Destination CPU architecture (enum: #{VALID_CPU.join(' ')})") do |arch|
    unless VALID_CPU.include? arch
      puts "Invalid destination (got: --dest-arch=#{arch}), pick one of: #{VALID_CPU.join(' ')}"
      exit 1
    end

    options[:arch] = arch
  end

  opts.on("-v", "--version", "Prints the version of nodec and exit") do
    puts ::Compiler::VERSION
    exit 0
  end

  opts.on("--node-version", "Prints the version of the Node.js runtime and exit") do
    puts ::Compiler.node_version
    exit 0
  end

  opts.on("-h", "--help", "Prints this help and exit") do
    usage.call(STDOUT)
    exit 0
  end

  opts.on("--examples", "Prints usage examples") do
    STDOUT.puts EXAMPLES
    exit 0
  end

  outer_opts = opts
end.parse!

entrance = ARGV[-1]
unless entrance.kind_of?(String) && entrance.length > 0
  usage.call(STDERR)
  exit 1
end

begin
  instance = ::Compiler.new entrance, options
  instance.run!
rescue ::Compiler::Error => e
  STDERR.puts e.message
  exit 1
end
